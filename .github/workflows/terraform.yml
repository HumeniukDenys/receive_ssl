name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

  #schedule:
  #  - cron: "*/5 * * * *"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
      CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    environment: production
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
 
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    ## Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      #run: terraform plan
      run: terraform plan -detailed-exitcode
      #-detailed-exitcode -input=false -out=plan.out
      #continue-on-error: false
      
    - name: Check for Plan Failure
      #if: steps.plan.outputs.exitcode == 1
      run: exit 1
   
    # On push to main, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
     
    # Uploads ssl certs in artifacts aafter workflou
    - name: –êrtifacts
      uses: actions/upload-artifact@v2
      with:
        name: ssl-artifacts
        path: certificates/** # or path/to/artifact
